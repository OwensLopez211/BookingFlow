{"version":"tree-0.1","tree":{"id":"App","path":"","constructInfo":{"fqn":"aws-cdk-lib.App","version":"2.207.0"},"children":{"BookFlowStack-dev":{"id":"BookFlowStack-dev","path":"BookFlowStack-dev","constructInfo":{"fqn":"aws-cdk-lib.Stack","version":"2.207.0"},"children":{"OrganizationsTable":{"id":"OrganizationsTable","path":"BookFlowStack-dev/OrganizationsTable","constructInfo":{"fqn":"aws-cdk-lib.aws_dynamodb.Table","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/OrganizationsTable/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_dynamodb.CfnTable","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::DynamoDB::Table","aws:cdk:cloudformation:props":{"attributeDefinitions":[{"attributeName":"PK","attributeType":"S"},{"attributeName":"SK","attributeType":"S"}],"billingMode":"PAY_PER_REQUEST","keySchema":[{"attributeName":"PK","keyType":"HASH"},{"attributeName":"SK","keyType":"RANGE"}],"pointInTimeRecoverySpecification":{"pointInTimeRecoveryEnabled":false},"tableName":"bookflow-organizations-dev"}}},"ScalingRole":{"id":"ScalingRole","path":"BookFlowStack-dev/OrganizationsTable/ScalingRole","constructInfo":{"fqn":"aws-cdk-lib.Resource","version":"2.207.0","metadata":[]}}}},"UsersTable":{"id":"UsersTable","path":"BookFlowStack-dev/UsersTable","constructInfo":{"fqn":"aws-cdk-lib.aws_dynamodb.Table","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/UsersTable/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_dynamodb.CfnTable","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::DynamoDB::Table","aws:cdk:cloudformation:props":{"attributeDefinitions":[{"attributeName":"PK","attributeType":"S"},{"attributeName":"SK","attributeType":"S"},{"attributeName":"cognitoId","attributeType":"S"}],"billingMode":"PAY_PER_REQUEST","globalSecondaryIndexes":[{"indexName":"cognitoId-index","keySchema":[{"attributeName":"cognitoId","keyType":"HASH"}],"projection":{"projectionType":"ALL"}}],"keySchema":[{"attributeName":"PK","keyType":"HASH"},{"attributeName":"SK","keyType":"RANGE"}],"pointInTimeRecoverySpecification":{"pointInTimeRecoveryEnabled":false},"tableName":"bookflow-users-dev"}}},"ScalingRole":{"id":"ScalingRole","path":"BookFlowStack-dev/UsersTable/ScalingRole","constructInfo":{"fqn":"aws-cdk-lib.Resource","version":"2.207.0","metadata":[]}}}},"AppointmentsTable":{"id":"AppointmentsTable","path":"BookFlowStack-dev/AppointmentsTable","constructInfo":{"fqn":"aws-cdk-lib.aws_dynamodb.Table","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/AppointmentsTable/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_dynamodb.CfnTable","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::DynamoDB::Table","aws:cdk:cloudformation:props":{"attributeDefinitions":[{"attributeName":"PK","attributeType":"S"},{"attributeName":"SK","attributeType":"S"}],"billingMode":"PAY_PER_REQUEST","keySchema":[{"attributeName":"PK","keyType":"HASH"},{"attributeName":"SK","keyType":"RANGE"}],"pointInTimeRecoverySpecification":{"pointInTimeRecoveryEnabled":false},"tableName":"bookflow-appointments-dev"}}},"ScalingRole":{"id":"ScalingRole","path":"BookFlowStack-dev/AppointmentsTable/ScalingRole","constructInfo":{"fqn":"aws-cdk-lib.Resource","version":"2.207.0","metadata":[]}}}},"UserPool":{"id":"UserPool","path":"BookFlowStack-dev/UserPool","constructInfo":{"fqn":"aws-cdk-lib.aws_cognito.UserPool","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/UserPool/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_cognito.CfnUserPool","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Cognito::UserPool","aws:cdk:cloudformation:props":{"accountRecoverySetting":{"recoveryMechanisms":[{"name":"verified_email","priority":1}]},"adminCreateUserConfig":{"allowAdminCreateUserOnly":false},"autoVerifiedAttributes":["email"],"emailVerificationMessage":"The verification code to your new account is {####}","emailVerificationSubject":"Verify your new account","policies":{"passwordPolicy":{"minimumLength":8,"requireLowercase":true,"requireUppercase":true,"requireNumbers":true,"requireSymbols":false}},"schema":[{"name":"email","mutable":true,"required":true},{"name":"given_name","mutable":true,"required":true},{"name":"family_name","mutable":true,"required":true},{"name":"orgId","attributeDataType":"String","stringAttributeConstraints":{"minLength":"1","maxLength":"50"},"mutable":true},{"name":"role","attributeDataType":"String","stringAttributeConstraints":{"minLength":"1","maxLength":"20"},"mutable":true}],"smsVerificationMessage":"The verification code to your new account is {####}","usernameAttributes":["email"],"userPoolName":"bookflow-users-dev","verificationMessageTemplate":{"defaultEmailOption":"CONFIRM_WITH_CODE","emailMessage":"The verification code to your new account is {####}","emailSubject":"Verify your new account","smsMessage":"The verification code to your new account is {####}"}}}}}},"UserPoolClient":{"id":"UserPoolClient","path":"BookFlowStack-dev/UserPoolClient","constructInfo":{"fqn":"aws-cdk-lib.aws_cognito.UserPoolClient","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/UserPoolClient/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_cognito.CfnUserPoolClient","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Cognito::UserPoolClient","aws:cdk:cloudformation:props":{"allowedOAuthFlows":["code"],"allowedOAuthFlowsUserPoolClient":true,"allowedOAuthScopes":["email","openid","profile"],"callbackUrLs":["http://localhost:3000/auth/callback"],"clientName":"bookflow-client-dev","explicitAuthFlows":["ALLOW_USER_PASSWORD_AUTH","ALLOW_ADMIN_USER_PASSWORD_AUTH","ALLOW_USER_SRP_AUTH","ALLOW_REFRESH_TOKEN_AUTH"],"generateSecret":false,"supportedIdentityProviders":["COGNITO"],"userPoolId":{"Ref":"UserPool6BA7E5F2"}}}}}},"IdentityPool":{"id":"IdentityPool","path":"BookFlowStack-dev/IdentityPool","constructInfo":{"fqn":"aws-cdk-lib.aws_cognito.CfnIdentityPool","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Cognito::IdentityPool","aws:cdk:cloudformation:props":{"allowUnauthenticatedIdentities":false,"cognitoIdentityProviders":[{"clientId":{"Ref":"UserPoolClient2F5918F7"},"providerName":{"Fn::GetAtt":["UserPool6BA7E5F2","ProviderName"]}}],"identityPoolName":"bookflow_identity_dev"}}},"FrontendBucket":{"id":"FrontendBucket","path":"BookFlowStack-dev/FrontendBucket","constructInfo":{"fqn":"aws-cdk-lib.aws_s3.Bucket","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/FrontendBucket/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_s3.CfnBucket","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::S3::Bucket","aws:cdk:cloudformation:props":{"bucketName":"bookflow-frontend-dev-812508052193","corsConfiguration":{"corsRules":[{"allowedHeaders":["*"],"allowedMethods":["GET"],"allowedOrigins":["*"]}]},"publicAccessBlockConfiguration":{"blockPublicAcls":false,"blockPublicPolicy":false,"ignorePublicAcls":false,"restrictPublicBuckets":false},"websiteConfiguration":{"indexDocument":"index.html","errorDocument":"index.html"}}}},"Policy":{"id":"Policy","path":"BookFlowStack-dev/FrontendBucket/Policy","constructInfo":{"fqn":"aws-cdk-lib.aws_s3.BucketPolicy","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/FrontendBucket/Policy/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_s3.CfnBucketPolicy","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::S3::BucketPolicy","aws:cdk:cloudformation:props":{"bucket":{"Ref":"FrontendBucketEFE2E19C"},"policyDocument":{"Statement":[{"Action":"s3:GetObject","Effect":"Allow","Principal":{"AWS":"*"},"Resource":{"Fn::Join":["",[{"Fn::GetAtt":["FrontendBucketEFE2E19C","Arn"]},"/*"]]}}],"Version":"2012-10-17"}}}}}}}},"LambdaExecutionRole":{"id":"LambdaExecutionRole","path":"BookFlowStack-dev/LambdaExecutionRole","constructInfo":{"fqn":"aws-cdk-lib.aws_iam.Role","version":"2.207.0","metadata":[]},"children":{"ImportLambdaExecutionRole":{"id":"ImportLambdaExecutionRole","path":"BookFlowStack-dev/LambdaExecutionRole/ImportLambdaExecutionRole","constructInfo":{"fqn":"aws-cdk-lib.Resource","version":"2.207.0","metadata":[]}},"Resource":{"id":"Resource","path":"BookFlowStack-dev/LambdaExecutionRole/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_iam.CfnRole","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::IAM::Role","aws:cdk:cloudformation:props":{"assumeRolePolicyDocument":{"Statement":[{"Action":"sts:AssumeRole","Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"}}],"Version":"2012-10-17"},"managedPolicyArns":[{"Fn::Join":["",["arn:",{"Ref":"AWS::Partition"},":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]]}],"policies":[{"policyName":"DynamoDBAccess","policyDocument":{"Statement":[{"Action":["dynamodb:DeleteItem","dynamodb:GetItem","dynamodb:PutItem","dynamodb:Query","dynamodb:Scan","dynamodb:UpdateItem"],"Effect":"Allow","Resource":[{"Fn::GetAtt":["AppointmentsTable8553CB1E","Arn"]},{"Fn::GetAtt":["OrganizationsTable01047E98","Arn"]},{"Fn::GetAtt":["UsersTable9725E9C8","Arn"]},{"Fn::Join":["",[{"Fn::GetAtt":["UsersTable9725E9C8","Arn"]},"/index/*"]]}]}],"Version":"2012-10-17"}},{"policyName":"CognitoAccess","policyDocument":{"Statement":[{"Action":["cognito-idp:AdminCreateUser","cognito-idp:AdminGetUser","cognito-idp:AdminSetUserPassword","cognito-idp:AdminUpdateUserAttributes","cognito-idp:ListUsers"],"Effect":"Allow","Resource":{"Fn::GetAtt":["UserPool6BA7E5F2","Arn"]}}],"Version":"2012-10-17"}}]}}}}},"AuthFunction":{"id":"AuthFunction","path":"BookFlowStack-dev/AuthFunction","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.Function","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/AuthFunction/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnFunction","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Function","aws:cdk:cloudformation:props":{"code":{"zipFile":"\n        const { CognitoIdentityProviderClient, AdminCreateUserCommand, AdminSetUserPasswordCommand, InitiateAuthCommand } = require('@aws-sdk/client-cognito-identity-provider');\n        const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');\n        const { DynamoDBDocumentClient, PutCommand, QueryCommand, GetCommand } = require('@aws-sdk/lib-dynamodb');\n        \n        const cognitoClient = new CognitoIdentityProviderClient({ region: process.env.REGION });\n        const dynamoClient = DynamoDBDocumentClient.from(new DynamoDBClient({ region: process.env.REGION }));\n        \n        const USER_POOL_ID = process.env.USER_POOL_ID;\n        const USER_POOL_CLIENT_ID = process.env.USER_POOL_CLIENT_ID;\n        const USERS_TABLE = process.env.USERS_TABLE;\n        const ORGANIZATIONS_TABLE = process.env.ORGANIZATIONS_TABLE;\n        \n        const generateUUID = () => {\n          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            const r = Math.random() * 16 | 0;\n            const v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n          });\n        };\n        \n        const createResponse = (statusCode, body) => ({\n          statusCode,\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n            'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n          },\n          body: JSON.stringify(body),\n        });\n        \n        const createOrganization = async (name, templateType) => {\n          const orgId = generateUUID();\n          const now = new Date().toISOString();\n          \n          const organization = {\n            PK: `ORG#${orgId}`,\n            SK: 'PROFILE',\n            id: orgId,\n            name: name,\n            templateType: templateType,\n            settings: {\n              timezone: 'America/Santiago',\n              businessHours: {\n                monday: { isOpen: true, openTime: '09:00', closeTime: '18:00' },\n                tuesday: { isOpen: true, openTime: '09:00', closeTime: '18:00' },\n                wednesday: { isOpen: true, openTime: '09:00', closeTime: '18:00' },\n                thursday: { isOpen: true, openTime: '09:00', closeTime: '18:00' },\n                friday: { isOpen: true, openTime: '09:00', closeTime: '18:00' },\n                saturday: { isOpen: true, openTime: '09:00', closeTime: '15:00' },\n                sunday: { isOpen: false, openTime: '09:00', closeTime: '18:00' },\n              },\n              notifications: {\n                emailReminders: true,\n                smsReminders: false,\n                autoConfirmation: true,\n                reminderHours: 24,\n              },\n            },\n            subscription: {\n              plan: 'free',\n              limits: {\n                maxResources: templateType === 'beauty_salon' ? 2 : 1,\n                maxAppointmentsPerMonth: 100,\n                maxUsers: 3,\n              },\n            },\n            createdAt: now,\n            updatedAt: now,\n          };\n          \n          const command = new PutCommand({\n            TableName: ORGANIZATIONS_TABLE,\n            Item: organization,\n          });\n          \n          await dynamoClient.send(command);\n          return { id: orgId, name: name, templateType: templateType };\n        };\n        \n        const createUser = async (cognitoId, email, firstName, lastName, orgId) => {\n          const userId = generateUUID();\n          const now = new Date().toISOString();\n          \n          const user = {\n            PK: `USER#${userId}`,\n            SK: 'PROFILE',\n            id: userId,\n            cognitoId: cognitoId,\n            email: email,\n            role: 'owner',\n            orgId: orgId,\n            profile: { firstName: firstName, lastName: lastName },\n            createdAt: now,\n            updatedAt: now,\n          };\n          \n          const command = new PutCommand({\n            TableName: USERS_TABLE,\n            Item: user,\n          });\n          \n          await dynamoClient.send(command);\n          return {\n            id: userId,\n            email: email,\n            role: 'owner',\n            orgId: orgId,\n            profile: { firstName: firstName, lastName: lastName },\n            cognitoId: cognitoId,\n          };\n        };\n        \n        const getUserByCognitoId = async (cognitoId) => {\n          const command = new QueryCommand({\n            TableName: USERS_TABLE,\n            IndexName: 'cognitoId-index',\n            KeyConditionExpression: 'cognitoId = :cognitoId',\n            ExpressionAttributeValues: { ':cognitoId': cognitoId },\n          });\n          \n          const result = await dynamoClient.send(command);\n          if (result.Items && result.Items.length > 0) {\n            const item = result.Items[0];\n            const { PK, SK, ...user } = item;\n            return user;\n          }\n          return null;\n        };\n        \n        exports.handler = async (event) => {\n          console.log('=== REAL AUTH FUNCTION (NO CUSTOM ATTRS) ===');\n          console.log('Event:', JSON.stringify(event, null, 2));\n          \n          try {\n            const { httpMethod, path, body } = event;\n            let requestBody = {};\n            \n            if (body) {\n              try {\n                requestBody = JSON.parse(body);\n                console.log('Parsed body:', requestBody);\n              } catch (e) {\n                console.log('Error parsing body:', e);\n                return createResponse(400, { success: false, error: 'Invalid JSON in request body' });\n              }\n            }\n            \n            // Handle CORS preflight\n            if (httpMethod === 'OPTIONS') {\n              return {\n                statusCode: 200,\n                headers: {\n                  'Access-Control-Allow-Origin': '*',\n                  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n                  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n                },\n                body: '',\n              };\n            }\n            \n            // REGISTER ENDPOINT (SIN CUSTOM ATTRIBUTES)\n            if (path && path.endsWith('/auth/register') && httpMethod === 'POST') {\n              console.log('=== REGISTRATION START (NO CUSTOM ATTRS) ===');\n              const { email, password, firstName, lastName, organizationName, templateType } = requestBody;\n              \n              // Validation\n              if (!email || !password || !firstName || !lastName || !organizationName || !templateType) {\n                return createResponse(400, { success: false, error: 'Todos los campos son requeridos' });\n              }\n              \n              if (password.length < 8) {\n                return createResponse(400, { success: false, error: 'La contraseña debe tener al menos 8 caracteres' });\n              }\n              \n              // Step 1: Create organization\n              console.log('Creating organization...');\n              const organization = await createOrganization(organizationName, templateType);\n              console.log('Organization created:', organization);\n              \n              // Step 2: Create user in Cognito (SIN custom attributes)\n              console.log('Creating user in Cognito...');\n              const tempPassword = password + 'Temp1!';\n              \n              const createUserCommand = new AdminCreateUserCommand({\n                UserPoolId: USER_POOL_ID,\n                Username: email,\n                UserAttributes: [\n                  { Name: 'email', Value: email },\n                  { Name: 'email_verified', Value: 'true' },\n                  { Name: 'given_name', Value: firstName },\n                  { Name: 'family_name', Value: lastName },\n                  // NO agregamos custom attributes por ahora\n                ],\n                MessageAction: 'SUPPRESS',\n                TemporaryPassword: tempPassword,\n              });\n              \n              const cognitoUser = await cognitoClient.send(createUserCommand);\n              const cognitoId = cognitoUser.User.Username;\n              console.log('Cognito user created:', cognitoId);\n              \n              // Step 3: Set permanent password\n              console.log('Setting permanent password...');\n              const setPasswordCommand = new AdminSetUserPasswordCommand({\n                UserPoolId: USER_POOL_ID,\n                Username: email,\n                Password: password,\n                Permanent: true,\n              });\n              \n              await cognitoClient.send(setPasswordCommand);\n              console.log('Password set successfully');\n              \n              // Step 4: Create user in DynamoDB\n              console.log('Creating user in DynamoDB...');\n              const user = await createUser(cognitoId, email, firstName, lastName, organization.id);\n              console.log('User created in DynamoDB:', user);\n              \n              // Step 5: Auto-login\n              console.log('Auto-login...');\n              const loginCommand = new InitiateAuthCommand({\n                ClientId: USER_POOL_CLIENT_ID,\n                AuthFlow: 'USER_PASSWORD_AUTH',\n                AuthParameters: { USERNAME: email, PASSWORD: password },\n              });\n              \n              const authResult = await cognitoClient.send(loginCommand);\n              console.log('Auto-login successful');\n              \n              return createResponse(200, {\n                success: true,\n                message: 'Usuario registrado exitosamente',\n                user: user,\n                organization: organization,\n                tokens: {\n                  accessToken: authResult.AuthenticationResult.AccessToken,\n                  idToken: authResult.AuthenticationResult.IdToken,\n                  refreshToken: authResult.AuthenticationResult.RefreshToken,\n                },\n              });\n            }\n            \n            // LOGIN ENDPOINT\n            if (path && path.endsWith('/auth/login') && httpMethod === 'POST') {\n              console.log('=== LOGIN START ===');\n              const { email, password } = requestBody;\n              \n              if (!email || !password) {\n                return createResponse(400, { success: false, error: 'Email y contraseña son requeridos' });\n              }\n              \n              // Authenticate with Cognito\n              console.log('Authenticating with Cognito...');\n              const loginCommand = new InitiateAuthCommand({\n                ClientId: USER_POOL_CLIENT_ID,\n                AuthFlow: 'USER_PASSWORD_AUTH',\n                AuthParameters: { USERNAME: email, PASSWORD: password },\n              });\n              \n              const authResult = await cognitoClient.send(loginCommand);\n              \n              if (authResult.ChallengeName) {\n                return createResponse(400, { success: false, error: 'Autenticación requiere pasos adicionales' });\n              }\n              \n              // Get user info from token\n              const accessToken = authResult.AuthenticationResult.AccessToken;\n              const tokenPayload = JSON.parse(Buffer.from(accessToken.split('.')[1], 'base64').toString());\n              const cognitoUsername = tokenPayload.username;\n              console.log('Token decoded, Cognito username:', cognitoUsername);\n              \n              // Get user from DynamoDB\n              console.log('Getting user from DynamoDB...');\n              const user = await getUserByCognitoId(cognitoUsername);\n              \n              if (!user) {\n                return createResponse(404, { success: false, error: 'Usuario no encontrado en el sistema' });\n              }\n              \n              console.log('Login successful for user:', user.email);\n              \n              return createResponse(200, {\n                success: true,\n                message: 'Login exitoso',\n                user: user,\n                tokens: {\n                  accessToken: authResult.AuthenticationResult.AccessToken,\n                  idToken: authResult.AuthenticationResult.IdToken,\n                  refreshToken: authResult.AuthenticationResult.RefreshToken,\n                },\n                expiresIn: authResult.AuthenticationResult.ExpiresIn,\n              });\n            }\n            \n            // GET CURRENT USER ENDPOINT\n            if (path && path.endsWith('/auth/me') && httpMethod === 'GET') {\n              console.log('=== GET CURRENT USER START ===');\n              \n              // Get authorization header\n              const authHeader = event.headers.Authorization || event.headers.authorization;\n              if (!authHeader || !authHeader.startsWith('Bearer ')) {\n                return createResponse(401, { success: false, error: 'Token de acceso requerido' });\n              }\n              \n              const accessToken = authHeader.substring(7);\n              \n              try {\n                // Get user info from token\n                const tokenPayload = JSON.parse(Buffer.from(accessToken.split('.')[1], 'base64').toString());\n                const cognitoUsername = tokenPayload.username;\n                console.log('Token decoded, Cognito username:', cognitoUsername);\n                \n                // Get user from DynamoDB\n                console.log('Getting user from DynamoDB...');\n                const user = await getUserByCognitoId(cognitoUsername);\n                \n                if (!user) {\n                  return createResponse(404, { success: false, error: 'Usuario no encontrado en el sistema' });\n                }\n                \n                // Get organization if user has orgId\n                let organization = null;\n                if (user.orgId) {\n                  const orgCommand = new GetCommand({\n                    TableName: ORGANIZATIONS_TABLE,\n                    Key: { PK: `ORG#${user.orgId}`, SK: 'PROFILE' },\n                  });\n                  \n                  const orgResult = await dynamoClient.send(orgCommand);\n                  if (orgResult.Item) {\n                    const { PK, SK, ...org } = orgResult.Item;\n                    organization = {\n                      id: org.id,\n                      name: org.name,\n                      templateType: org.templateType,\n                    };\n                  }\n                }\n                \n                console.log('Current user retrieved successfully:', user.email);\n                \n                return createResponse(200, {\n                  success: true,\n                  message: 'Usuario actual obtenido exitosamente',\n                  user: {\n                    id: user.id,\n                    email: user.email,\n                    role: user.role,\n                    orgId: user.orgId,\n                    profile: user.profile,\n                    cognitoId: user.cognitoId,\n                  },\n                  organization: organization,\n                });\n              } catch (tokenError) {\n                console.error('Error decoding token:', tokenError);\n                return createResponse(401, { success: false, error: 'Token inválido' });\n              }\n            }\n            \n            return createResponse(404, { success: false, error: 'Endpoint no encontrado' });\n            \n          } catch (error) {\n            console.error('=== AUTH ERROR ===');\n            console.error('Error:', error);\n            console.error('Stack:', error.stack);\n            \n            if (error.name === 'UsernameExistsException') {\n              return createResponse(400, { success: false, error: 'Ya existe un usuario con este email' });\n            }\n            \n            if (error.name === 'InvalidPasswordException') {\n              return createResponse(400, { success: false, error: 'La contraseña no cumple con los requisitos de seguridad' });\n            }\n            \n            if (error.name === 'NotAuthorizedException') {\n              return createResponse(400, { success: false, error: 'Email o contraseña incorrectos' });\n            }\n            \n            return createResponse(500, { success: false, error: 'Error interno del servidor: ' + error.message });\n          }\n        };\n      "},"environment":{"variables":{"STAGE":"dev","USER_POOL_ID":{"Ref":"UserPool6BA7E5F2"},"USER_POOL_CLIENT_ID":{"Ref":"UserPoolClient2F5918F7"},"ORGANIZATIONS_TABLE":{"Ref":"OrganizationsTable01047E98"},"USERS_TABLE":{"Ref":"UsersTable9725E9C8"},"APPOINTMENTS_TABLE":{"Ref":"AppointmentsTable8553CB1E"},"REGION":"sa-east-1"}},"functionName":"bookflow-auth-dev","handler":"index.handler","role":{"Fn::GetAtt":["LambdaExecutionRoleD5C26073","Arn"]},"runtime":"nodejs18.x","timeout":30}}}}},"OrganizationsFunction":{"id":"OrganizationsFunction","path":"BookFlowStack-dev/OrganizationsFunction","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.Function","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/OrganizationsFunction/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnFunction","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Function","aws:cdk:cloudformation:props":{"code":{"zipFile":"\n        const { CognitoIdentityProviderClient, GetUserCommand } = require('@aws-sdk/client-cognito-identity-provider');\n        const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');\n        const { DynamoDBDocumentClient, GetCommand, PutCommand, QueryCommand } = require('@aws-sdk/lib-dynamodb');\n        \n        const cognitoClient = new CognitoIdentityProviderClient({ region: process.env.REGION });\n        const dynamoClient = DynamoDBDocumentClient.from(new DynamoDBClient({ region: process.env.REGION }));\n        \n        const ORGANIZATIONS_TABLE = process.env.ORGANIZATIONS_TABLE;\n        const USERS_TABLE = process.env.USERS_TABLE;\n        \n        const createResponse = (statusCode, body) => ({\n          statusCode,\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n            'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n          },\n          body: JSON.stringify(body),\n        });\n        \n        const getCurrentUser = async (accessToken) => {\n          try {\n            const command = new GetUserCommand({ AccessToken: accessToken });\n            const cognitoUser = await cognitoClient.send(command);\n            \n            const cognitoId = cognitoUser.Username;\n            \n            const userQuery = new QueryCommand({\n              TableName: USERS_TABLE,\n              IndexName: 'cognitoId-index',\n              KeyConditionExpression: 'cognitoId = :cognitoId',\n              ExpressionAttributeValues: { ':cognitoId': cognitoId },\n            });\n            \n            const userResult = await dynamoClient.send(userQuery);\n            \n            if (!userResult.Items || userResult.Items.length === 0) {\n              throw new Error('Usuario no encontrado');\n            }\n            \n            const { PK, SK, ...user } = userResult.Items[0];\n            return user;\n          } catch (error) {\n            throw new Error('Token inválido o usuario no encontrado');\n          }\n        };\n        \n        const getOrganization = async (orgId) => {\n          const command = new GetCommand({\n            TableName: ORGANIZATIONS_TABLE,\n            Key: { PK: `ORG#${orgId}`, SK: 'PROFILE' },\n          });\n          \n          const result = await dynamoClient.send(command);\n          if (!result.Item) return null;\n          \n          const { PK, SK, ...organization } = result.Item;\n          return organization;\n        };\n        \n        const updateOrganization = async (orgId, updates) => {\n          const updatedData = {\n            ...updates,\n            updatedAt: new Date().toISOString(),\n          };\n\n          const item = {\n            PK: `ORG#${orgId}`,\n            SK: 'PROFILE',\n            ...updatedData,\n          };\n\n          const command = new PutCommand({\n            TableName: ORGANIZATIONS_TABLE,\n            Item: item,\n          });\n\n          await dynamoClient.send(command);\n          \n          const { PK, SK, ...organization } = item;\n          return organization;\n        };\n        \n        exports.handler = async (event) => {\n          console.log('=== ORGANIZATIONS HANDLER ===');\n          console.log('Event:', JSON.stringify(event, null, 2));\n          \n          try {\n            const { httpMethod, path, body, headers, pathParameters } = event;\n            \n            // Handle CORS preflight\n            if (httpMethod === 'OPTIONS') {\n              return createResponse(200, {});\n            }\n            \n            // Parse request body if present\n            let requestData = {};\n            if (body) {\n              try {\n                requestData = JSON.parse(body);\n              } catch (error) {\n                return createResponse(400, { success: false, error: 'Invalid JSON in request body' });\n              }\n            }\n            \n            // Extract user from token for protected endpoints\n            const authHeader = headers.Authorization || headers.authorization;\n            if (!authHeader || !authHeader.startsWith('Bearer ')) {\n              return createResponse(401, { success: false, error: 'Token de acceso requerido' });\n            }\n            \n            const accessToken = authHeader.substring(7);\n            let currentUser;\n            \n            try {\n              currentUser = await getCurrentUser(accessToken);\n            } catch (error) {\n              return createResponse(401, { success: false, error: error.message });\n            }\n            \n            // GET USER'S ORGANIZATION\n            if (path?.endsWith('/organizations/me') && httpMethod === 'GET') {\n              console.log('=== GET MY ORGANIZATION REQUEST ===');\n              \n              if (!currentUser.orgId) {\n                return createResponse(404, { success: false, error: 'El usuario no pertenece a ninguna organización' });\n              }\n              \n              if (currentUser.orgId !== currentUser.orgId) {\n                return createResponse(403, { success: false, error: 'No tienes permisos para acceder a esta organización' });\n              }\n              \n              const organization = await getOrganization(currentUser.orgId);\n              if (!organization) {\n                return createResponse(404, { success: false, error: 'Organización no encontrada' });\n              }\n              \n              return createResponse(200, {\n                success: true,\n                organization: {\n                  id: organization.id,\n                  name: organization.name,\n                  templateType: organization.templateType,\n                  settings: organization.settings,\n                  subscription: organization.subscription,\n                  createdAt: organization.createdAt,\n                  updatedAt: organization.updatedAt,\n                },\n                message: 'Organización del usuario obtenida exitosamente'\n              });\n            }\n            \n            // UPDATE ORGANIZATION SETTINGS\n            if (path?.match(/\\/organizations\\/[^/]+\\/settings$/) && httpMethod === 'PUT') {\n              console.log('=== UPDATE ORGANIZATION SETTINGS REQUEST ===');\n              \n              const orgId = pathParameters?.orgId;\n              if (!orgId) {\n                return createResponse(400, { success: false, error: 'ID de organización requerido' });\n              }\n              \n              if (currentUser.role !== 'owner') {\n                return createResponse(403, { success: false, error: 'Solo los propietarios pueden modificar las configuraciones de la organización' });\n              }\n              \n              if (currentUser.orgId !== orgId) {\n                return createResponse(403, { success: false, error: 'No tienes permisos para modificar esta organización' });\n              }\n              \n              const currentOrg = await getOrganization(orgId);\n              if (!currentOrg) {\n                return createResponse(404, { success: false, error: 'Organización no encontrada' });\n              }\n              \n              const organizationToUpdate = {\n                ...currentOrg,\n                settings: {\n                  ...currentOrg.settings,\n                  ...(requestData.timezone && { timezone: requestData.timezone }),\n                  ...(requestData.businessHours && { \n                    businessHours: {\n                      ...currentOrg.settings.businessHours,\n                      ...requestData.businessHours,\n                    }\n                  }),\n                  ...(requestData.notifications && { \n                    notifications: {\n                      ...currentOrg.settings.notifications,\n                      ...requestData.notifications,\n                    }\n                  }),\n                }\n              };\n              \n              const updatedOrganization = await updateOrganization(orgId, organizationToUpdate);\n              \n              return createResponse(200, {\n                success: true,\n                organization: {\n                  id: updatedOrganization.id,\n                  name: updatedOrganization.name,\n                  templateType: updatedOrganization.templateType,\n                  settings: updatedOrganization.settings,\n                  subscription: updatedOrganization.subscription,\n                  updatedAt: updatedOrganization.updatedAt,\n                },\n                message: 'Configuraciones de la organización actualizadas exitosamente'\n              });\n            }\n            \n            return createResponse(404, { success: false, error: 'Endpoint no encontrado' });\n            \n          } catch (error) {\n            console.error('=== ORGANIZATIONS HANDLER ERROR ===');\n            console.error('Error:', error);\n            \n            return createResponse(500, { success: false, error: 'Error interno del servidor: ' + error.message });\n          }\n        };\n      "},"environment":{"variables":{"STAGE":"dev","USER_POOL_ID":{"Ref":"UserPool6BA7E5F2"},"USER_POOL_CLIENT_ID":{"Ref":"UserPoolClient2F5918F7"},"ORGANIZATIONS_TABLE":{"Ref":"OrganizationsTable01047E98"},"USERS_TABLE":{"Ref":"UsersTable9725E9C8"},"APPOINTMENTS_TABLE":{"Ref":"AppointmentsTable8553CB1E"},"REGION":"sa-east-1"}},"functionName":"bookflow-organizations-dev","handler":"index.handler","role":{"Fn::GetAtt":["LambdaExecutionRoleD5C26073","Arn"]},"runtime":"nodejs18.x","timeout":30}}}}},"Api":{"id":"Api","path":"BookFlowStack-dev/Api","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.RestApi","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnRestApi","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::RestApi","aws:cdk:cloudformation:props":{"description":"BookFlow API for dev","name":"bookflow-api-dev"}}},"CloudWatchRole":{"id":"CloudWatchRole","path":"BookFlowStack-dev/Api/CloudWatchRole","constructInfo":{"fqn":"aws-cdk-lib.aws_iam.Role","version":"2.207.0","metadata":[]},"children":{"ImportCloudWatchRole":{"id":"ImportCloudWatchRole","path":"BookFlowStack-dev/Api/CloudWatchRole/ImportCloudWatchRole","constructInfo":{"fqn":"aws-cdk-lib.Resource","version":"2.207.0","metadata":[]}},"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/CloudWatchRole/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_iam.CfnRole","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::IAM::Role","aws:cdk:cloudformation:props":{"assumeRolePolicyDocument":{"Statement":[{"Action":"sts:AssumeRole","Effect":"Allow","Principal":{"Service":"apigateway.amazonaws.com"}}],"Version":"2012-10-17"},"managedPolicyArns":[{"Fn::Join":["",["arn:",{"Ref":"AWS::Partition"},":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"]]}]}}}}},"Account":{"id":"Account","path":"BookFlowStack-dev/Api/Account","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnAccount","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Account","aws:cdk:cloudformation:props":{"cloudWatchRoleArn":{"Fn::GetAtt":["ApiCloudWatchRole73EC6FC4","Arn"]}}}},"Deployment":{"id":"Deployment","path":"BookFlowStack-dev/Api/Deployment","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Deployment","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Deployment/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnDeployment","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Deployment","aws:cdk:cloudformation:props":{"description":"BookFlow API for dev","restApiId":{"Ref":"ApiF70053CD"}}}}}},"DeploymentStage.dev":{"id":"DeploymentStage.dev","path":"BookFlowStack-dev/Api/DeploymentStage.dev","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Stage","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/DeploymentStage.dev/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnStage","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Stage","aws:cdk:cloudformation:props":{"deploymentId":{"Ref":"ApiDeploymentB17BE62Da65529a52f3c8a6f3c448b51f409d9d0"},"restApiId":{"Ref":"ApiF70053CD"},"stageName":"dev"}}}}},"Endpoint":{"id":"Endpoint","path":"BookFlowStack-dev/Api/Endpoint","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.207.0"}},"Default":{"id":"Default","path":"BookFlowStack-dev/Api/Default","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.ResourceBase","version":"2.207.0","metadata":[]},"children":{"OPTIONS":{"id":"OPTIONS","path":"BookFlowStack-dev/Api/Default/OPTIONS","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/OPTIONS/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"apiKeyRequired":false,"authorizationType":"NONE","httpMethod":"OPTIONS","integration":{"type":"MOCK","requestTemplates":{"application/json":"{ statusCode: 200 }"},"integrationResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":"'Content-Type,Authorization'","method.response.header.Access-Control-Allow-Origin":"'http://localhost:3000'","method.response.header.Vary":"'Origin'","method.response.header.Access-Control-Allow-Methods":"'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"},"responseTemplates":{"application/json":"#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:5173\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"}}]},"methodResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":true,"method.response.header.Access-Control-Allow-Origin":true,"method.response.header.Vary":true,"method.response.header.Access-Control-Allow-Methods":true}}],"resourceId":{"Fn::GetAtt":["ApiF70053CD","RootResourceId"]},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"v1":{"id":"v1","path":"BookFlowStack-dev/Api/Default/v1","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Resource","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnResource","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Resource","aws:cdk:cloudformation:props":{"parentId":{"Fn::GetAtt":["ApiF70053CD","RootResourceId"]},"pathPart":"v1","restApiId":{"Ref":"ApiF70053CD"}}}},"OPTIONS":{"id":"OPTIONS","path":"BookFlowStack-dev/Api/Default/v1/OPTIONS","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/OPTIONS/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"apiKeyRequired":false,"authorizationType":"NONE","httpMethod":"OPTIONS","integration":{"type":"MOCK","requestTemplates":{"application/json":"{ statusCode: 200 }"},"integrationResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":"'Content-Type,Authorization'","method.response.header.Access-Control-Allow-Origin":"'http://localhost:3000'","method.response.header.Vary":"'Origin'","method.response.header.Access-Control-Allow-Methods":"'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"},"responseTemplates":{"application/json":"#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:5173\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"}}]},"methodResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":true,"method.response.header.Access-Control-Allow-Origin":true,"method.response.header.Vary":true,"method.response.header.Access-Control-Allow-Methods":true}}],"resourceId":{"Ref":"Apiv1D42035C8"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"auth":{"id":"auth","path":"BookFlowStack-dev/Api/Default/v1/auth","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Resource","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnResource","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Resource","aws:cdk:cloudformation:props":{"parentId":{"Ref":"Apiv1D42035C8"},"pathPart":"auth","restApiId":{"Ref":"ApiF70053CD"}}}},"OPTIONS":{"id":"OPTIONS","path":"BookFlowStack-dev/Api/Default/v1/auth/OPTIONS","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/OPTIONS/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"apiKeyRequired":false,"authorizationType":"NONE","httpMethod":"OPTIONS","integration":{"type":"MOCK","requestTemplates":{"application/json":"{ statusCode: 200 }"},"integrationResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":"'Content-Type,Authorization'","method.response.header.Access-Control-Allow-Origin":"'http://localhost:3000'","method.response.header.Vary":"'Origin'","method.response.header.Access-Control-Allow-Methods":"'GET,POST,PUT,DELETE,OPTIONS'"},"responseTemplates":{"application/json":"#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:5173\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"}}]},"methodResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":true,"method.response.header.Access-Control-Allow-Origin":true,"method.response.header.Vary":true,"method.response.header.Access-Control-Allow-Methods":true}}],"resourceId":{"Ref":"Apiv1authE828A432"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"login":{"id":"login","path":"BookFlowStack-dev/Api/Default/v1/auth/login","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Resource","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/login/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnResource","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Resource","aws:cdk:cloudformation:props":{"parentId":{"Ref":"Apiv1authE828A432"},"pathPart":"login","restApiId":{"Ref":"ApiF70053CD"}}}},"OPTIONS":{"id":"OPTIONS","path":"BookFlowStack-dev/Api/Default/v1/auth/login/OPTIONS","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/login/OPTIONS/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"apiKeyRequired":false,"authorizationType":"NONE","httpMethod":"OPTIONS","integration":{"type":"MOCK","requestTemplates":{"application/json":"{ statusCode: 200 }"},"integrationResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":"'Content-Type,Authorization'","method.response.header.Access-Control-Allow-Origin":"'http://localhost:3000'","method.response.header.Vary":"'Origin'","method.response.header.Access-Control-Allow-Methods":"'GET,POST,PUT,DELETE,OPTIONS'"},"responseTemplates":{"application/json":"#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:5173\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"}}]},"methodResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":true,"method.response.header.Access-Control-Allow-Origin":true,"method.response.header.Vary":true,"method.response.header.Access-Control-Allow-Methods":true}}],"resourceId":{"Ref":"Apiv1authlogin413519B5"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"POST":{"id":"POST","path":"BookFlowStack-dev/Api/Default/v1/auth/login/POST","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.login":{"id":"ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.login","path":"BookFlowStack-dev/Api/Default/v1/auth/login/POST/ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.login","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/",{"Ref":"ApiDeploymentStagedev51EE5D56"},"/POST/v1/auth/login"]]}}}},"ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.login":{"id":"ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.login","path":"BookFlowStack-dev/Api/Default/v1/auth/login/POST/ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.login","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/test-invoke-stage/POST/v1/auth/login"]]}}}},"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/login/POST/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"authorizationType":"NONE","httpMethod":"POST","integration":{"type":"AWS_PROXY","uri":{"Fn::Join":["",["arn:aws:apigateway:sa-east-1:lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"/invocations"]]},"integrationHttpMethod":"POST"},"resourceId":{"Ref":"Apiv1authlogin413519B5"},"restApiId":{"Ref":"ApiF70053CD"}}}}}}}},"register":{"id":"register","path":"BookFlowStack-dev/Api/Default/v1/auth/register","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Resource","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/register/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnResource","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Resource","aws:cdk:cloudformation:props":{"parentId":{"Ref":"Apiv1authE828A432"},"pathPart":"register","restApiId":{"Ref":"ApiF70053CD"}}}},"OPTIONS":{"id":"OPTIONS","path":"BookFlowStack-dev/Api/Default/v1/auth/register/OPTIONS","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/register/OPTIONS/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"apiKeyRequired":false,"authorizationType":"NONE","httpMethod":"OPTIONS","integration":{"type":"MOCK","requestTemplates":{"application/json":"{ statusCode: 200 }"},"integrationResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":"'Content-Type,Authorization'","method.response.header.Access-Control-Allow-Origin":"'http://localhost:3000'","method.response.header.Vary":"'Origin'","method.response.header.Access-Control-Allow-Methods":"'GET,POST,PUT,DELETE,OPTIONS'"},"responseTemplates":{"application/json":"#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:5173\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"}}]},"methodResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":true,"method.response.header.Access-Control-Allow-Origin":true,"method.response.header.Vary":true,"method.response.header.Access-Control-Allow-Methods":true}}],"resourceId":{"Ref":"Apiv1authregisterA689072E"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"POST":{"id":"POST","path":"BookFlowStack-dev/Api/Default/v1/auth/register/POST","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.register":{"id":"ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.register","path":"BookFlowStack-dev/Api/Default/v1/auth/register/POST/ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.register","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/",{"Ref":"ApiDeploymentStagedev51EE5D56"},"/POST/v1/auth/register"]]}}}},"ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.register":{"id":"ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.register","path":"BookFlowStack-dev/Api/Default/v1/auth/register/POST/ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.register","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/test-invoke-stage/POST/v1/auth/register"]]}}}},"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/register/POST/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"authorizationType":"NONE","httpMethod":"POST","integration":{"type":"AWS_PROXY","uri":{"Fn::Join":["",["arn:aws:apigateway:sa-east-1:lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"/invocations"]]},"integrationHttpMethod":"POST"},"resourceId":{"Ref":"Apiv1authregisterA689072E"},"restApiId":{"Ref":"ApiF70053CD"}}}}}}}},"forgot-password":{"id":"forgot-password","path":"BookFlowStack-dev/Api/Default/v1/auth/forgot-password","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Resource","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/forgot-password/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnResource","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Resource","aws:cdk:cloudformation:props":{"parentId":{"Ref":"Apiv1authE828A432"},"pathPart":"forgot-password","restApiId":{"Ref":"ApiF70053CD"}}}},"OPTIONS":{"id":"OPTIONS","path":"BookFlowStack-dev/Api/Default/v1/auth/forgot-password/OPTIONS","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/forgot-password/OPTIONS/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"apiKeyRequired":false,"authorizationType":"NONE","httpMethod":"OPTIONS","integration":{"type":"MOCK","requestTemplates":{"application/json":"{ statusCode: 200 }"},"integrationResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":"'Content-Type,Authorization'","method.response.header.Access-Control-Allow-Origin":"'http://localhost:3000'","method.response.header.Vary":"'Origin'","method.response.header.Access-Control-Allow-Methods":"'GET,POST,PUT,DELETE,OPTIONS'"},"responseTemplates":{"application/json":"#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:5173\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"}}]},"methodResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":true,"method.response.header.Access-Control-Allow-Origin":true,"method.response.header.Vary":true,"method.response.header.Access-Control-Allow-Methods":true}}],"resourceId":{"Ref":"Apiv1authforgotpasswordEC5B994F"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"POST":{"id":"POST","path":"BookFlowStack-dev/Api/Default/v1/auth/forgot-password/POST","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.forgot-password":{"id":"ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.forgot-password","path":"BookFlowStack-dev/Api/Default/v1/auth/forgot-password/POST/ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.forgot-password","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/",{"Ref":"ApiDeploymentStagedev51EE5D56"},"/POST/v1/auth/forgot-password"]]}}}},"ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.forgot-password":{"id":"ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.forgot-password","path":"BookFlowStack-dev/Api/Default/v1/auth/forgot-password/POST/ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.forgot-password","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/test-invoke-stage/POST/v1/auth/forgot-password"]]}}}},"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/forgot-password/POST/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"authorizationType":"NONE","httpMethod":"POST","integration":{"type":"AWS_PROXY","uri":{"Fn::Join":["",["arn:aws:apigateway:sa-east-1:lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"/invocations"]]},"integrationHttpMethod":"POST"},"resourceId":{"Ref":"Apiv1authforgotpasswordEC5B994F"},"restApiId":{"Ref":"ApiF70053CD"}}}}}}}},"reset-password":{"id":"reset-password","path":"BookFlowStack-dev/Api/Default/v1/auth/reset-password","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Resource","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/reset-password/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnResource","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Resource","aws:cdk:cloudformation:props":{"parentId":{"Ref":"Apiv1authE828A432"},"pathPart":"reset-password","restApiId":{"Ref":"ApiF70053CD"}}}},"OPTIONS":{"id":"OPTIONS","path":"BookFlowStack-dev/Api/Default/v1/auth/reset-password/OPTIONS","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/reset-password/OPTIONS/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"apiKeyRequired":false,"authorizationType":"NONE","httpMethod":"OPTIONS","integration":{"type":"MOCK","requestTemplates":{"application/json":"{ statusCode: 200 }"},"integrationResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":"'Content-Type,Authorization'","method.response.header.Access-Control-Allow-Origin":"'http://localhost:3000'","method.response.header.Vary":"'Origin'","method.response.header.Access-Control-Allow-Methods":"'GET,POST,PUT,DELETE,OPTIONS'"},"responseTemplates":{"application/json":"#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:5173\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"}}]},"methodResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":true,"method.response.header.Access-Control-Allow-Origin":true,"method.response.header.Vary":true,"method.response.header.Access-Control-Allow-Methods":true}}],"resourceId":{"Ref":"Apiv1authresetpassword88CD45D3"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"POST":{"id":"POST","path":"BookFlowStack-dev/Api/Default/v1/auth/reset-password/POST","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.reset-password":{"id":"ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.reset-password","path":"BookFlowStack-dev/Api/Default/v1/auth/reset-password/POST/ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.reset-password","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/",{"Ref":"ApiDeploymentStagedev51EE5D56"},"/POST/v1/auth/reset-password"]]}}}},"ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.reset-password":{"id":"ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.reset-password","path":"BookFlowStack-dev/Api/Default/v1/auth/reset-password/POST/ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.reset-password","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/test-invoke-stage/POST/v1/auth/reset-password"]]}}}},"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/reset-password/POST/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"authorizationType":"NONE","httpMethod":"POST","integration":{"type":"AWS_PROXY","uri":{"Fn::Join":["",["arn:aws:apigateway:sa-east-1:lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"/invocations"]]},"integrationHttpMethod":"POST"},"resourceId":{"Ref":"Apiv1authresetpassword88CD45D3"},"restApiId":{"Ref":"ApiF70053CD"}}}}}}}},"refresh":{"id":"refresh","path":"BookFlowStack-dev/Api/Default/v1/auth/refresh","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Resource","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/refresh/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnResource","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Resource","aws:cdk:cloudformation:props":{"parentId":{"Ref":"Apiv1authE828A432"},"pathPart":"refresh","restApiId":{"Ref":"ApiF70053CD"}}}},"OPTIONS":{"id":"OPTIONS","path":"BookFlowStack-dev/Api/Default/v1/auth/refresh/OPTIONS","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/refresh/OPTIONS/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"apiKeyRequired":false,"authorizationType":"NONE","httpMethod":"OPTIONS","integration":{"type":"MOCK","requestTemplates":{"application/json":"{ statusCode: 200 }"},"integrationResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":"'Content-Type,Authorization'","method.response.header.Access-Control-Allow-Origin":"'http://localhost:3000'","method.response.header.Vary":"'Origin'","method.response.header.Access-Control-Allow-Methods":"'GET,POST,PUT,DELETE,OPTIONS'"},"responseTemplates":{"application/json":"#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:5173\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"}}]},"methodResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":true,"method.response.header.Access-Control-Allow-Origin":true,"method.response.header.Vary":true,"method.response.header.Access-Control-Allow-Methods":true}}],"resourceId":{"Ref":"Apiv1authrefresh5918088A"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"POST":{"id":"POST","path":"BookFlowStack-dev/Api/Default/v1/auth/refresh/POST","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.refresh":{"id":"ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.refresh","path":"BookFlowStack-dev/Api/Default/v1/auth/refresh/POST/ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.auth.refresh","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/",{"Ref":"ApiDeploymentStagedev51EE5D56"},"/POST/v1/auth/refresh"]]}}}},"ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.refresh":{"id":"ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.refresh","path":"BookFlowStack-dev/Api/Default/v1/auth/refresh/POST/ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.auth.refresh","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/test-invoke-stage/POST/v1/auth/refresh"]]}}}},"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/refresh/POST/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"authorizationType":"NONE","httpMethod":"POST","integration":{"type":"AWS_PROXY","uri":{"Fn::Join":["",["arn:aws:apigateway:sa-east-1:lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"/invocations"]]},"integrationHttpMethod":"POST"},"resourceId":{"Ref":"Apiv1authrefresh5918088A"},"restApiId":{"Ref":"ApiF70053CD"}}}}}}}},"me":{"id":"me","path":"BookFlowStack-dev/Api/Default/v1/auth/me","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Resource","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/me/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnResource","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Resource","aws:cdk:cloudformation:props":{"parentId":{"Ref":"Apiv1authE828A432"},"pathPart":"me","restApiId":{"Ref":"ApiF70053CD"}}}},"OPTIONS":{"id":"OPTIONS","path":"BookFlowStack-dev/Api/Default/v1/auth/me/OPTIONS","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/me/OPTIONS/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"apiKeyRequired":false,"authorizationType":"NONE","httpMethod":"OPTIONS","integration":{"type":"MOCK","requestTemplates":{"application/json":"{ statusCode: 200 }"},"integrationResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":"'Content-Type,Authorization'","method.response.header.Access-Control-Allow-Origin":"'http://localhost:3000'","method.response.header.Vary":"'Origin'","method.response.header.Access-Control-Allow-Methods":"'GET,POST,PUT,DELETE,OPTIONS'"},"responseTemplates":{"application/json":"#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:5173\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"}}]},"methodResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":true,"method.response.header.Access-Control-Allow-Origin":true,"method.response.header.Vary":true,"method.response.header.Access-Control-Allow-Methods":true}}],"resourceId":{"Ref":"Apiv1authme146D1F4A"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"GET":{"id":"GET","path":"BookFlowStack-dev/Api/Default/v1/auth/me/GET","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"ApiPermission.BookFlowStackdevApi35F7A340.GET..v1.auth.me":{"id":"ApiPermission.BookFlowStackdevApi35F7A340.GET..v1.auth.me","path":"BookFlowStack-dev/Api/Default/v1/auth/me/GET/ApiPermission.BookFlowStackdevApi35F7A340.GET..v1.auth.me","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/",{"Ref":"ApiDeploymentStagedev51EE5D56"},"/GET/v1/auth/me"]]}}}},"ApiPermission.Test.BookFlowStackdevApi35F7A340.GET..v1.auth.me":{"id":"ApiPermission.Test.BookFlowStackdevApi35F7A340.GET..v1.auth.me","path":"BookFlowStack-dev/Api/Default/v1/auth/me/GET/ApiPermission.Test.BookFlowStackdevApi35F7A340.GET..v1.auth.me","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/test-invoke-stage/GET/v1/auth/me"]]}}}},"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/auth/me/GET/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"authorizationType":"NONE","httpMethod":"GET","integration":{"type":"AWS_PROXY","uri":{"Fn::Join":["",["arn:aws:apigateway:sa-east-1:lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["AuthFunctionA1CD5E0F","Arn"]},"/invocations"]]},"integrationHttpMethod":"POST"},"resourceId":{"Ref":"Apiv1authme146D1F4A"},"restApiId":{"Ref":"ApiF70053CD"}}}}}}}}}},"organizations":{"id":"organizations","path":"BookFlowStack-dev/Api/Default/v1/organizations","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Resource","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/organizations/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnResource","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Resource","aws:cdk:cloudformation:props":{"parentId":{"Ref":"Apiv1D42035C8"},"pathPart":"organizations","restApiId":{"Ref":"ApiF70053CD"}}}},"OPTIONS":{"id":"OPTIONS","path":"BookFlowStack-dev/Api/Default/v1/organizations/OPTIONS","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/organizations/OPTIONS/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"apiKeyRequired":false,"authorizationType":"NONE","httpMethod":"OPTIONS","integration":{"type":"MOCK","requestTemplates":{"application/json":"{ statusCode: 200 }"},"integrationResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":"'Content-Type,Authorization'","method.response.header.Access-Control-Allow-Origin":"'http://localhost:3000'","method.response.header.Vary":"'Origin'","method.response.header.Access-Control-Allow-Methods":"'GET,POST,PUT,DELETE,OPTIONS'"},"responseTemplates":{"application/json":"#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:5173\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"}}]},"methodResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":true,"method.response.header.Access-Control-Allow-Origin":true,"method.response.header.Vary":true,"method.response.header.Access-Control-Allow-Methods":true}}],"resourceId":{"Ref":"Apiv1organizations8E7FC934"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"GET":{"id":"GET","path":"BookFlowStack-dev/Api/Default/v1/organizations/GET","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"ApiPermission.BookFlowStackdevApi35F7A340.GET..v1.organizations":{"id":"ApiPermission.BookFlowStackdevApi35F7A340.GET..v1.organizations","path":"BookFlowStack-dev/Api/Default/v1/organizations/GET/ApiPermission.BookFlowStackdevApi35F7A340.GET..v1.organizations","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/",{"Ref":"ApiDeploymentStagedev51EE5D56"},"/GET/v1/organizations"]]}}}},"ApiPermission.Test.BookFlowStackdevApi35F7A340.GET..v1.organizations":{"id":"ApiPermission.Test.BookFlowStackdevApi35F7A340.GET..v1.organizations","path":"BookFlowStack-dev/Api/Default/v1/organizations/GET/ApiPermission.Test.BookFlowStackdevApi35F7A340.GET..v1.organizations","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/test-invoke-stage/GET/v1/organizations"]]}}}},"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/organizations/GET/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"authorizationType":"NONE","httpMethod":"GET","integration":{"type":"AWS_PROXY","uri":{"Fn::Join":["",["arn:aws:apigateway:sa-east-1:lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"/invocations"]]},"integrationHttpMethod":"POST"},"resourceId":{"Ref":"Apiv1organizations8E7FC934"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"POST":{"id":"POST","path":"BookFlowStack-dev/Api/Default/v1/organizations/POST","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.organizations":{"id":"ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.organizations","path":"BookFlowStack-dev/Api/Default/v1/organizations/POST/ApiPermission.BookFlowStackdevApi35F7A340.POST..v1.organizations","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/",{"Ref":"ApiDeploymentStagedev51EE5D56"},"/POST/v1/organizations"]]}}}},"ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.organizations":{"id":"ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.organizations","path":"BookFlowStack-dev/Api/Default/v1/organizations/POST/ApiPermission.Test.BookFlowStackdevApi35F7A340.POST..v1.organizations","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/test-invoke-stage/POST/v1/organizations"]]}}}},"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/organizations/POST/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"authorizationType":"NONE","httpMethod":"POST","integration":{"type":"AWS_PROXY","uri":{"Fn::Join":["",["arn:aws:apigateway:sa-east-1:lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"/invocations"]]},"integrationHttpMethod":"POST"},"resourceId":{"Ref":"Apiv1organizations8E7FC934"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"me":{"id":"me","path":"BookFlowStack-dev/Api/Default/v1/organizations/me","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Resource","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/organizations/me/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnResource","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Resource","aws:cdk:cloudformation:props":{"parentId":{"Ref":"Apiv1organizations8E7FC934"},"pathPart":"me","restApiId":{"Ref":"ApiF70053CD"}}}},"OPTIONS":{"id":"OPTIONS","path":"BookFlowStack-dev/Api/Default/v1/organizations/me/OPTIONS","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/organizations/me/OPTIONS/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"apiKeyRequired":false,"authorizationType":"NONE","httpMethod":"OPTIONS","integration":{"type":"MOCK","requestTemplates":{"application/json":"{ statusCode: 200 }"},"integrationResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":"'Content-Type,Authorization'","method.response.header.Access-Control-Allow-Origin":"'http://localhost:3000'","method.response.header.Vary":"'Origin'","method.response.header.Access-Control-Allow-Methods":"'GET,POST,PUT,DELETE,OPTIONS'"},"responseTemplates":{"application/json":"#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:5173\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"}}]},"methodResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":true,"method.response.header.Access-Control-Allow-Origin":true,"method.response.header.Vary":true,"method.response.header.Access-Control-Allow-Methods":true}}],"resourceId":{"Ref":"Apiv1organizationsmeD7A935D5"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"GET":{"id":"GET","path":"BookFlowStack-dev/Api/Default/v1/organizations/me/GET","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"ApiPermission.BookFlowStackdevApi35F7A340.GET..v1.organizations.me":{"id":"ApiPermission.BookFlowStackdevApi35F7A340.GET..v1.organizations.me","path":"BookFlowStack-dev/Api/Default/v1/organizations/me/GET/ApiPermission.BookFlowStackdevApi35F7A340.GET..v1.organizations.me","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/",{"Ref":"ApiDeploymentStagedev51EE5D56"},"/GET/v1/organizations/me"]]}}}},"ApiPermission.Test.BookFlowStackdevApi35F7A340.GET..v1.organizations.me":{"id":"ApiPermission.Test.BookFlowStackdevApi35F7A340.GET..v1.organizations.me","path":"BookFlowStack-dev/Api/Default/v1/organizations/me/GET/ApiPermission.Test.BookFlowStackdevApi35F7A340.GET..v1.organizations.me","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/test-invoke-stage/GET/v1/organizations/me"]]}}}},"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/organizations/me/GET/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"authorizationType":"NONE","httpMethod":"GET","integration":{"type":"AWS_PROXY","uri":{"Fn::Join":["",["arn:aws:apigateway:sa-east-1:lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"/invocations"]]},"integrationHttpMethod":"POST"},"resourceId":{"Ref":"Apiv1organizationsmeD7A935D5"},"restApiId":{"Ref":"ApiF70053CD"}}}}}}}},"{orgId}":{"id":"{orgId}","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Resource","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnResource","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Resource","aws:cdk:cloudformation:props":{"parentId":{"Ref":"Apiv1organizations8E7FC934"},"pathPart":"{orgId}","restApiId":{"Ref":"ApiF70053CD"}}}},"OPTIONS":{"id":"OPTIONS","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/OPTIONS","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/OPTIONS/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"apiKeyRequired":false,"authorizationType":"NONE","httpMethod":"OPTIONS","integration":{"type":"MOCK","requestTemplates":{"application/json":"{ statusCode: 200 }"},"integrationResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":"'Content-Type,Authorization'","method.response.header.Access-Control-Allow-Origin":"'http://localhost:3000'","method.response.header.Vary":"'Origin'","method.response.header.Access-Control-Allow-Methods":"'GET,POST,PUT,DELETE,OPTIONS'"},"responseTemplates":{"application/json":"#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:5173\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"}}]},"methodResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":true,"method.response.header.Access-Control-Allow-Origin":true,"method.response.header.Vary":true,"method.response.header.Access-Control-Allow-Methods":true}}],"resourceId":{"Ref":"Apiv1organizationsorgIdE0F0D229"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"GET":{"id":"GET","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/GET","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"ApiPermission.BookFlowStackdevApi35F7A340.GET..v1.organizations.{orgId}":{"id":"ApiPermission.BookFlowStackdevApi35F7A340.GET..v1.organizations.{orgId}","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/GET/ApiPermission.BookFlowStackdevApi35F7A340.GET..v1.organizations.{orgId}","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/",{"Ref":"ApiDeploymentStagedev51EE5D56"},"/GET/v1/organizations/*"]]}}}},"ApiPermission.Test.BookFlowStackdevApi35F7A340.GET..v1.organizations.{orgId}":{"id":"ApiPermission.Test.BookFlowStackdevApi35F7A340.GET..v1.organizations.{orgId}","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/GET/ApiPermission.Test.BookFlowStackdevApi35F7A340.GET..v1.organizations.{orgId}","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/test-invoke-stage/GET/v1/organizations/*"]]}}}},"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/GET/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"authorizationType":"NONE","httpMethod":"GET","integration":{"type":"AWS_PROXY","uri":{"Fn::Join":["",["arn:aws:apigateway:sa-east-1:lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"/invocations"]]},"integrationHttpMethod":"POST"},"resourceId":{"Ref":"Apiv1organizationsorgIdE0F0D229"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"PUT":{"id":"PUT","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/PUT","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"ApiPermission.BookFlowStackdevApi35F7A340.PUT..v1.organizations.{orgId}":{"id":"ApiPermission.BookFlowStackdevApi35F7A340.PUT..v1.organizations.{orgId}","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/PUT/ApiPermission.BookFlowStackdevApi35F7A340.PUT..v1.organizations.{orgId}","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/",{"Ref":"ApiDeploymentStagedev51EE5D56"},"/PUT/v1/organizations/*"]]}}}},"ApiPermission.Test.BookFlowStackdevApi35F7A340.PUT..v1.organizations.{orgId}":{"id":"ApiPermission.Test.BookFlowStackdevApi35F7A340.PUT..v1.organizations.{orgId}","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/PUT/ApiPermission.Test.BookFlowStackdevApi35F7A340.PUT..v1.organizations.{orgId}","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/test-invoke-stage/PUT/v1/organizations/*"]]}}}},"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/PUT/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"authorizationType":"NONE","httpMethod":"PUT","integration":{"type":"AWS_PROXY","uri":{"Fn::Join":["",["arn:aws:apigateway:sa-east-1:lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"/invocations"]]},"integrationHttpMethod":"POST"},"resourceId":{"Ref":"Apiv1organizationsorgIdE0F0D229"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"settings":{"id":"settings","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/settings","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Resource","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/settings/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnResource","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Resource","aws:cdk:cloudformation:props":{"parentId":{"Ref":"Apiv1organizationsorgIdE0F0D229"},"pathPart":"settings","restApiId":{"Ref":"ApiF70053CD"}}}},"OPTIONS":{"id":"OPTIONS","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/settings/OPTIONS","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/settings/OPTIONS/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"apiKeyRequired":false,"authorizationType":"NONE","httpMethod":"OPTIONS","integration":{"type":"MOCK","requestTemplates":{"application/json":"{ statusCode: 200 }"},"integrationResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":"'Content-Type,Authorization'","method.response.header.Access-Control-Allow-Origin":"'http://localhost:3000'","method.response.header.Vary":"'Origin'","method.response.header.Access-Control-Allow-Methods":"'GET,POST,PUT,DELETE,OPTIONS'"},"responseTemplates":{"application/json":"#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:5173\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"}}]},"methodResponses":[{"statusCode":"204","responseParameters":{"method.response.header.Access-Control-Allow-Headers":true,"method.response.header.Access-Control-Allow-Origin":true,"method.response.header.Vary":true,"method.response.header.Access-Control-Allow-Methods":true}}],"resourceId":{"Ref":"Apiv1organizationsorgIdsettingsE4B735DE"},"restApiId":{"Ref":"ApiF70053CD"}}}}}},"PUT":{"id":"PUT","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/settings/PUT","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.Method","version":"2.207.0","metadata":[]},"children":{"ApiPermission.BookFlowStackdevApi35F7A340.PUT..v1.organizations.{orgId}.settings":{"id":"ApiPermission.BookFlowStackdevApi35F7A340.PUT..v1.organizations.{orgId}.settings","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/settings/PUT/ApiPermission.BookFlowStackdevApi35F7A340.PUT..v1.organizations.{orgId}.settings","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/",{"Ref":"ApiDeploymentStagedev51EE5D56"},"/PUT/v1/organizations/*/settings"]]}}}},"ApiPermission.Test.BookFlowStackdevApi35F7A340.PUT..v1.organizations.{orgId}.settings":{"id":"ApiPermission.Test.BookFlowStackdevApi35F7A340.PUT..v1.organizations.{orgId}.settings","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/settings/PUT/ApiPermission.Test.BookFlowStackdevApi35F7A340.PUT..v1.organizations.{orgId}.settings","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnPermission","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Permission","aws:cdk:cloudformation:props":{"action":"lambda:InvokeFunction","functionName":{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"principal":"apigateway.amazonaws.com","sourceArn":{"Fn::Join":["",["arn:aws:execute-api:sa-east-1:812508052193:",{"Ref":"ApiF70053CD"},"/test-invoke-stage/PUT/v1/organizations/*/settings"]]}}}},"Resource":{"id":"Resource","path":"BookFlowStack-dev/Api/Default/v1/organizations/{orgId}/settings/PUT/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_apigateway.CfnMethod","version":"2.207.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::ApiGateway::Method","aws:cdk:cloudformation:props":{"authorizationType":"NONE","httpMethod":"PUT","integration":{"type":"AWS_PROXY","uri":{"Fn::Join":["",["arn:aws:apigateway:sa-east-1:lambda:path/2015-03-31/functions/",{"Fn::GetAtt":["OrganizationsFunction00DF16AC","Arn"]},"/invocations"]]},"integrationHttpMethod":"POST"},"resourceId":{"Ref":"Apiv1organizationsorgIdsettingsE4B735DE"},"restApiId":{"Ref":"ApiF70053CD"}}}}}}}}}}}}}}}}}},"UserPoolId":{"id":"UserPoolId","path":"BookFlowStack-dev/UserPoolId","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.207.0"}},"UserPoolClientId":{"id":"UserPoolClientId","path":"BookFlowStack-dev/UserPoolClientId","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.207.0"}},"IdentityPoolId":{"id":"IdentityPoolId","path":"BookFlowStack-dev/IdentityPoolId","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.207.0"}},"ApiUrl":{"id":"ApiUrl","path":"BookFlowStack-dev/ApiUrl","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.207.0"}},"FrontendBucketName":{"id":"FrontendBucketName","path":"BookFlowStack-dev/FrontendBucketName","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.207.0"}},"WebsiteUrl":{"id":"WebsiteUrl","path":"BookFlowStack-dev/WebsiteUrl","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.207.0"}},"Region":{"id":"Region","path":"BookFlowStack-dev/Region","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.207.0"}},"CDKMetadata":{"id":"CDKMetadata","path":"BookFlowStack-dev/CDKMetadata","constructInfo":{"fqn":"constructs.Construct","version":"10.4.2"},"children":{"Default":{"id":"Default","path":"BookFlowStack-dev/CDKMetadata/Default","constructInfo":{"fqn":"aws-cdk-lib.CfnResource","version":"2.207.0"}}}},"BootstrapVersion":{"id":"BootstrapVersion","path":"BookFlowStack-dev/BootstrapVersion","constructInfo":{"fqn":"aws-cdk-lib.CfnParameter","version":"2.207.0"}},"CheckBootstrapVersion":{"id":"CheckBootstrapVersion","path":"BookFlowStack-dev/CheckBootstrapVersion","constructInfo":{"fqn":"aws-cdk-lib.CfnRule","version":"2.207.0"}}}},"Tree":{"id":"Tree","path":"Tree","constructInfo":{"fqn":"constructs.Construct","version":"10.4.2"}}}}}